apiVersion: apps/v1 #we know that all the communication in k8s happen through api. 
#what we want to create
#inside kind you need to define type of api you want to execute. 
kind: Deployment #pod#service
metadata: #using metada and name we define the name of deployment
  name: mongo #a deployment name myapp-deployment is created using .metadata.name field
  labels:
    app: mongo 
spec: #inside your deployment we need to provide spec how this deployment api will launch your pod
  replicas: 1 #it will create three pod
  selector: #the .spec.selector file define ho the deployment find which pod to manage. 
    matchLabels: #.spec.selector.matchlabel it is euqivalent to map ke,value. something called as match expression
      app: mongo 
  template: #container template deploy in three pod
    metadata:
      name: mongo   #using metadata name
      labels: 
        app: mongo  #this label should match with pod label. 
    spec: #we define container spec
       containers:
          - name: mongo   
            image: pankajdets/mongo
            ports:
              - containerPort: 27017 
                name: mongo 
              #this volume mount is inside my container
            volumeMounts:
            - name: storage  
              mountPath: /mnt/data/db         
       volumes: #the name of the volume and the mount will be same
          - name: storage
            persistentVolumeClaim:
            #mapped to pvc claim we created earlier
              claimName: mongo-pvc
          
        